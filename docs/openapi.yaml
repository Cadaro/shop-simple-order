openapi: 3.1.3
info:
  title: ShopCore API
  description: |
    OpenAPI specification for the ShopCore app.
    Contains endpoints for stocks, orders, users, customer invoice data and token authentication.
    
    ## Authentication
    Most endpoints require authentication using Bearer tokens. Obtain a token by calling the `/api/auth/token` endpoint with valid credentials.
    
    ## Supported Countries
    The system supports the following European countries: AT, BE, CH, DE, DK, ES, FI, FR, GB, IE, IT, NL, NO, PL, PT, SE
  version: "1.0.0"
  contact:
    name: ShopCore API Support
    email: support@shopcore.io
  license:
    name: MIT
servers:
  - url: http://localhost:3333
    description: Local development server
tags:
  - name: auth
    description: Authentication
  - name: users
    description: User management and registration
  - name: customer-invoice-data
    description: Customer's invoice data management
  - name: stocks
    description: Stock listing and creation
  - name: orders
    description: Orders management for authenticated users
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Enter the OAT (Opaque Access Token) with the 'Bearer ' prefix, e.g. "Bearer sca_abcde12345"
  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage' 

    CountryCode:
      type: string
      description: ISO 3166-1 alpha-2 country codes supported by the system
      enum: ["AT", "BE", "CH", "DE", "DK", "ES", "FI", "FR", "GB", "IE", "IT", "NL", "NO", "PL", "PT", "SE"]
      example: "PL"

    Address:
      type: object
      required:
        - streetName
        - streetNumber
        - city
        - postalCode
        - countryCode
      properties:
        streetName:
          type: string
        streetNumber:
          type: string
        apartmentNumber:
          type: string
          nullable: true
        city:
          type: string
        postalCode:
          type: string
        region:
          type: string
          nullable: true
        countryCode:
          $ref: '#/components/schemas/CountryCode'

    InvoiceData:
      type: object
      required:
        - customerType
        - address
      properties:
        firstName:
          type: string
          nullable: true
          description: 'required for customerType == PERSON; optional for company'
        lastName:
          type: string
          nullable: true
          description: 'required for customerType == PERSON; optional for company'
        companyName:
          type: string
          nullable: true
          description: 'required for customerType == COMPANY; optional for person'
        taxId:
          type: string
          nullable: true
          description: 'required for customerType == COMPANY; optional for person'
        customerType:
          type: string
          enum: ["PERSON", "COMPANY"]
        address:
          type: object
          $ref: '#/components/schemas/Address'
        
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          nullable: true
          format: date-time
    UserCreate:
      type: object
      required:
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserCreateResponse:
      type: object
      properties:
        userId:
          type: string
    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
    TokenRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    TokenResponse:
      type: object
      properties:
        token:
          type: string
        type:
          type: string
          enum:
          - Bearer
        expiresAt:
          type: string
          format: date-time
          description: expiration date and time
    StockPhoto:
      type: object
      required:
        - url
      properties:
        url:
          type: string
        name:
          type: string
          nullable: true
    StockFetchResponse:
      type: object
      properties:
        itemId:
          type: string
        price:
          type: number
          format: double
        priceCurrency:
          type: string
          enum: ["PLN", "EUR"]
        vatAmount:
          type: number
          format: double
        vatRate:
          type: number
          format: double
        name:
          type: string
        itemDescription:
          type: string
        size:
          type: string
          nullable: true
        availableQty:
          type: integer
        photos:
          type: array
          items:
            $ref: '#/components/schemas/StockPhoto'
    StockCreateRequest:
      type: object
      required:
        - price
        - priceCurrency
        - vatAmount
        - vatRate
        - name
        - itemDescription
        - availableQty
        - photos
      properties:
        itemId:
          type: string
          description: 'unique item identifier. If not provided, then uuid will be used'
        price:
          type: number
          format: double
          description: 'gross price'
        priceCurrency:
          type: string
          enum: ["PLN", "EUR"]
          description: 'price currency'
        vatAmount:
          type: number
          format: double
          description: 'vat amount of item price'
        vatRate:
          type: number
          format: double
          description: 'vat rate for example 0.23 as 23%'
        name:
          type: string
          description: 'item name for example blue t-shirt'
        itemDescription:
          type: string
          description: 'short item description'
        size:
          type: string
          description: 'size of an item, for example XL, 34...'
        availableQty:
          type: integer
          description: 'available quantity of an item'
        photos:
          type: array
          items:
            $ref: '#/components/schemas/StockPhoto'
          description: 'list of photos'
      example:
        itemId: "blue-tshirt-xl"
        price: 29.99
        priceCurrency: "PLN"
        vatAmount: 5.98
        vatRate: 0.23
        name: "Blue T-Shirt"
        itemDescription: "Comfortable cotton t-shirt in blue color"
        size: "XL"
        availableQty: 100
        photos:
          - url: "https://example.com/photo1.jpg"
            name: "Front view"
          - url: "https://example.com/photo2.jpg"
            name: "Back view"
    StockCreatedResponse:
      type: object
      properties:
        itemId:
          type: string
    OrderSku:
      type: object
      properties:
        itemId:
          type: string
        itemName:
          type: string
        qty:
          type: integer
        itemPrice:
          type: number
          format: double
        currency: 
          type: string
          enum: ["PLN", "EUR"]
        vatAmount:
          type: number
          format: double
        vatRate:
          type: number
          format: double
    Order:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        details:
          type: array
          items:
            $ref: '#/components/schemas/OrderSku'
        createdAt:
          type: string
          format: date-time
    OrderCreate:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderSku'
      example:
        items:
          - itemId: "abc123"
            itemName: "Blue T-Shirt"
            qty: 2
            itemPrice: 29.99
            currency: "PLN"
            vatAmount: 5.98
            vatRate: 0.23

paths:
  /api/auth/token:
      post:
        tags:
          - auth
        summary: Obtain token
        description: Obtain an authentication token by providing credentials (email and password).
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRequest'
        responses:
          '200':
            description: Authentication successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TokenResponse'
          '401':
            description: Invalid credentials
          
  /api/auth/users:
    get:
      tags:
        - users
      summary: Fetch data of authenticated
      description: Returns a data of registered user. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A user data
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - users
      summary: Register user
      description: Create a new user (registration). Public endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - users
      summary: Update authenticated user
      description: Update the authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '204':
          description: User updated
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/customers/invoice-data:
    get:
      tags:
        - customer-invoice-data
      summary: Get customer (user) invoice data
      description: Returns customer (user) invoice data related to userId
      security:
        - bearerAuth: []
      responses:
        '200':
          description: object with customer's invoice data
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/InvoiceData'
        '404':
          description: Invoice customer data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - customer-invoice-data
      summary: Create new customer (user) invoice data related to userId
      description: Create new customer (user) invoice data related to userId
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceData'
      responses:
        '201':
          description: 'Customer invoice data is created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          description: Invoice customer data already exists for related user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - customer-invoice-data
      summary: Update customer (user) invoice data related to userId
      description: Update customer (user) invoice data related to userId
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceData'
      responses:
        '204':
          description: 'Customer invoice data has been updated'
        '400':
          description: Invoice customer data does not exists for related user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  /api/stocks:
    get:
      tags:
        - stocks
      summary: List stocks
      description: Returns a list of available stocks (products)
      responses:
        '200':
          description: A list of stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockFetchResponse'
      
    post:
      tags:
        - stocks
      summary: Create stock
      description: Create a new stock entry; admin only
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockCreateRequest'
      responses:
        '201':
          description: Stock created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockCreatedResponse'
        '400':
          description: Provided itemId already exists or stock creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/stocks/{itemId}:
    get:
      tags:
        - stocks
      summary: Get stock
      description: Retrieve details for a single stock item by itemId
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stock found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockFetchResponse'
        '404':
          description: Stock item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/orders:
    get:
      tags:
        - orders
      summary: List orders
      description: Returns a list of orders for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - orders
      summary: Create order
      description: Create a new order for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get order
      description: Retrieve a single order by id for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
 